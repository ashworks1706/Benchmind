{
  "agents": [
    {
      "id": "triage_agent",
      "name": "triage_agent",
      "type": "zero-shot-react-description",
      "file_path": "agents/main_agents.py",
      "prompt": "Answer the following question as best you can.\n\nQuestion: {input}\n\n{agent_scratchpad}",
      "system_instruction": "You are a customer support triage agent.\nYour role is to analyze customer queries and route them to the appropriate specialist:\n- Technical issues \u2192 Technical Support Agent\n- Billing/payment issues \u2192 Billing Agent\n- Complex or escalated cases \u2192 Escalation Agent\n\nBe professional, empathetic, and efficient in your routing decisions.",
      "model_config": {
        "model": "gemini-2.0-flash",
        "temperature": 0.7,
        "max_tokens": 1024
      },
      "tools": [
        "query_customer_history",
        "search_knowledge_base"
      ],
      "hyperparameters": {
        "verbose": true,
        "max_iterations": 5,
        "handle_parsing_errors": true
      },
      "objective": "Routes customer queries to appropriate specialist agents based on query content: Technical Support, Billing, or Escalation. Acts professionally, empathetically, and efficiently.",
      "code_snippet": "class TriageAgent:\n    \"\"\"\n    Triage Agent - Routes customer queries to appropriate specialist agents\n    \n    This agent analyzes incoming customer queries and determines which\n    specialist agent should handle the request based on the query content.\n    \"\"\"\n    \n    def __init__(self, llm):\n        self.llm = llm\n        self.name = \"triage_agent\"\n        self.type = \"zero-shot-react-description\"\n        \n        # System instruction for the triage agent\n        self.system_instruction = \"\"\"You are a customer support triage agent.\nYour role is to analyze customer queries and route them to the appropriate specialist:\n- Technical issues \u2192 Technical Support Agent\n- Billing/payment issues \u2192 Billing Agent\n- Complex or escalated cases \u2192 Escalation Agent\n\nBe professional, empathetic, and efficient in your routing decisions.\"\"\"\n\n        # Prompt template\n        self.prompt = PromptTemplate(\n            input_variables=[\"input\", \"agent_scratchpad\"],\n            template=\"\"\"Answer the following question as best you can.\n\nQuestion: {input}\n\n{agent_scratchpad}\"\"\"\n        )\n        \n        # Tools available to triage agent\n        from tools.database_tools import query_customer_history\n        from tools.knowledge_tools import search_knowledge_base\n        \n        self.tools = [\n            Tool(\n                name=\"query_customer_history\",\n                func=query_customer_history,\n                description=\"Query customer history and previous interactions\"\n            ),\n            Tool(\n                name=\"search_knowledge_base\",\n                func=search_knowledge_base,\n                description=\"Search the knowledge base for relevant articles\"\n            )\n        ]\n        \n        # Create the agent\n        self.agent = create_react_agent(\n            llm=self.llm,\n            tools=self.tools,\n            prompt=self.prompt\n        )\n        \n        self.executor = AgentExecutor(\n            agent=self.agent,\n            tools=self.tools,\n            verbose=True,\n            max_iterations=5,\n            handle_parsing_errors=True\n        )"
    },
    {
      "id": "technical_support_agent",
      "name": "technical_support_agent",
      "type": "conversational-react-description",
      "file_path": "agents/main_agents.py",
      "prompt": "You are a helpful technical support agent.\n\nChat History:\n{chat_history}\n\nQuestion: {input}\n\n{agent_scratchpad}",
      "system_instruction": "You are a technical support specialist.\nYour role is to diagnose and resolve technical issues efficiently.\nProvide clear, step-by-step instructions and be patient with customers.\nIf an issue is too complex, escalate to the Escalation Agent.",
      "model_config": {
        "model": "gemini-2.0-flash",
        "temperature": 0.7,
        "max_tokens": 1024
      },
      "tools": [
        "run_diagnostics",
        "check_system_status",
        "search_knowledge_base"
      ],
      "hyperparameters": {
        "verbose": true,
        "max_iterations": 10,
        "handle_parsing_errors": true
      },
      "objective": "Diagnoses and resolves technical issues by providing clear, step-by-step troubleshooting guidance. Patiently assists customers and escalates complex issues when necessary.",
      "code_snippet": "class TechnicalSupportAgent:\n    \"\"\"\n    Technical Support Agent - Handles technical issues and troubleshooting\n    \n    This agent specializes in diagnosing and resolving technical problems,\n    providing step-by-step troubleshooting guidance.\n    \"\"\"\n    \n    def __init__(self, llm):\n        self.llm = llm\n        self.name = \"technical_support_agent\"\n        self.type = \"conversational-react-description\"\n        \n        self.system_instruction = \"\"\"You are a technical support specialist.\nYour role is to diagnose and resolve technical issues efficiently.\nProvide clear, step-by-step instructions and be patient with customers.\nIf an issue is too complex, escalate to the Escalation Agent.\"\"\"\n\n        self.prompt = PromptTemplate(\n            input_variables=[\"input\", \"chat_history\", \"agent_scratchpad\"],\n            template=\"\"\"You are a helpful technical support agent.\n\nChat History:\n{chat_history}\n\nQuestion: {input}\n\n{agent_scratchpad}\"\"\"\n        )\n        \n        # Technical support tools\n        from tools.technical_tools import run_diagnostics, check_system_status\n        from tools.knowledge_tools import search_knowledge_base\n        \n        self.tools = [\n            Tool(\n                name=\"run_diagnostics\",\n                func=run_diagnostics,\n                description=\"Run system diagnostics to identify technical issues\"\n            ),\n            Tool(\n                name=\"check_system_status\",\n                func=check_system_status,\n                description=\"Check current system status and health\"\n            ),\n            Tool(\n                name=\"search_knowledge_base\",\n                func=search_knowledge_base,\n                description=\"Search technical documentation and solutions\"\n            )\n        ]\n        \n        self.agent = create_react_agent(\n            llm=self.llm,\n            tools=self.tools,\n            prompt=self.prompt\n        )\n        \n        self.executor = AgentExecutor(\n            agent=self.agent,\n            tools=self.tools,\n            verbose=True,\n            max_iterations=10,\n            handle_parsing_errors=True\n        )"
    },
    {
      "id": "billing_agent",
      "name": "billing_agent",
      "type": "zero-shot-react-description",
      "file_path": "agents/main_agents.py",
      "prompt": "Handle the following billing inquiry professionally.\n\nInquiry: {input}\n\n{agent_scratchpad}",
      "system_instruction": "You are a billing and payments specialist.\nYour role is to handle billing inquiries, process payments, and manage subscriptions.\nBe accurate with financial information and follow security protocols.\nVerify customer identity before discussing sensitive financial data.",
      "model_config": {
        "model": "gemini-2.0-flash",
        "temperature": 0.7,
        "max_tokens": 1024
      },
      "tools": [
        "query_billing_history",
        "process_refund",
        "update_subscription",
        "query_customer_history"
      ],
      "hyperparameters": {
        "verbose": true,
        "max_iterations": 8,
        "handle_parsing_errors": true
      },
      "objective": "Manages billing, payments, and subscription queries. Handles inquiries, processes payments, manages subscriptions, ensures financial accuracy, and follows security protocols, including customer identity verification.",
      "code_snippet": "class BillingAgent:\n    \"\"\"\n    Billing Agent - Manages billing, payments, and subscription queries\n    \n    This agent handles all financial transactions, subscription management,\n    and billing-related customer inquiries.\n    \"\"\"\n    \n    def __init__(self, llm):\n        self.llm = llm\n        self.name = \"billing_agent\"\n        self.type = \"zero-shot-react-description\"\n        \n        self.system_instruction = \"\"\"You are a billing and payments specialist.\nYour role is to handle billing inquiries, process payments, and manage subscriptions.\nBe accurate with financial information and follow security protocols.\nVerify customer identity before discussing sensitive financial data.\"\"\"\n\n        self.prompt = PromptTemplate(\n            input_variables=[\"input\", \"agent_scratchpad\"],\n            template=\"\"\"Handle the following billing inquiry professionally.\n\nInquiry: {input}\n\n{agent_scratchpad}\"\"\"\n        )\n        \n        # Billing tools\n        from tools.billing_tools import query_billing_history, process_refund, update_subscription\n        from tools.database_tools import query_customer_history\n        \n        self.tools = [\n            Tool(\n                name=\"query_billing_history\",\n                func=query_billing_history,\n                description=\"Query customer's billing and payment history\"\n            ),\n            Tool(\n                name=\"process_refund\",\n                func=process_refund,\n                description=\"Process a refund for the customer\"\n            ),\n            Tool(\n                name=\"update_subscription\",\n                func=update_subscription,\n                description=\"Update or modify customer subscription\"\n            ),\n            Tool(\n                name=\"query_customer_history\",\n                func=query_customer_history,\n                description=\"Query customer's account information\"\n            )\n        ]\n        \n        self.agent = create_react_agent(\n            llm=self.llm,\n            tools=self.tools,\n            prompt=self.prompt\n        )\n        \n        self.executor = AgentExecutor(\n            agent=self.agent,\n            tools=self.tools,\n            verbose=True,\n            max_iterations=8,\n            handle_parsing_errors=True\n        )"
    },
    {
      "id": "escalation_agent",
      "name": "escalation_agent",
      "type": "zero-shot-react-description",
      "file_path": "agents/main_agents.py",
      "prompt": "Handle this escalated case with care and professionalism.\n\nCase: {input}\n\n{agent_scratchpad}",
      "system_instruction": "You are an escalation specialist.\nYour role is to handle complex cases that require human intervention.\nCreate detailed tickets, summarize context, and ensure smooth handoff to human agents.\nPrioritize cases appropriately and maintain professional communication.",
      "model_config": {
        "model": "gemini-2.0-flash",
        "temperature": 0.7,
        "max_tokens": 1024
      },
      "tools": [
        "create_ticket",
        "assign_to_human",
        "send_email",
        "send_slack_notification"
      ],
      "hyperparameters": {
        "verbose": true,
        "max_iterations": 6,
        "handle_parsing_errors": true
      },
      "objective": "Manages complex cases requiring human intervention by creating detailed support tickets, summarizing context, and ensuring smooth handoff to human agents. Prioritizes cases and maintains professional communication.",
      "code_snippet": "class EscalationAgent:\n    \"\"\"\n    Escalation Agent - Handles complex cases requiring human intervention\n    \n    This agent manages escalated cases, creates tickets for human agents,\n    and ensures proper handoff of complex issues.\n    \"\"\"\n    \n    def __init__(self, llm):\n        self.llm = llm\n        self.name = \"escalation_agent\"\n        self.type = \"zero-shot-react-description\"\n        \n        self.system_instruction = \"\"\"You are an escalation specialist.\nYour role is to handle complex cases that require human intervention.\nCreate detailed tickets, summarize context, and ensure smooth handoff to human agents.\nPrioritize cases appropriately and maintain professional communication.\"\"\"\n\n        self.prompt = PromptTemplate(\n            input_variables=[\"input\", \"agent_scratchpad\"],\n            template=\"\"\"Handle this escalated case with care and professionalism.\n\nCase: {input}\n\n{agent_scratchpad}\"\"\"\n        )\n        \n        # Escalation tools\n        from tools.ticket_tools import create_ticket, assign_to_human\n        from tools.notification_tools import send_email, send_slack_notification\n        \n        self.tools = [\n            Tool(\n                name=\"create_ticket\",\n                func=create_ticket,\n                description=\"Create a support ticket for human agents\"\n            ),\n            Tool(\n                name=\"assign_to_human\",\n                func=assign_to_human,\n                description=\"Assign case to a human support agent\"\n            ),\n            Tool(\n                name=\"send_email\",\n                func=send_email,\n                description=\"Send email notification to customer or team\"\n            ),\n            Tool(\n                name=\"send_slack_notification\",\n                func=send_slack_notification,\n                description=\"Send notification to support team via Slack\"\n            )\n        ]\n        \n        self.agent = create_react_agent(\n            llm=self.llm,\n            tools=self.tools,\n            prompt=self.prompt\n        )\n        \n        self.executor = AgentExecutor(\n            agent=self.agent,\n            tools=self.tools,\n            verbose=True,\n            max_iterations=6,\n            handle_parsing_errors=True\n        )"
    }
  ],
  "tools": [
    {
      "id": "triage_agent_query_customer_history",
      "name": "query_customer_history",
      "description": "Query customer history and previous interactions",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "query",
          "type": "str",
          "description": "The customer identifier or query string to lookup customer history."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `query_customer_history` imported from `tools.database_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Retrieves historical data and previous interactions for a given customer."
    },
    {
      "id": "triage_agent_search_knowledge_base",
      "name": "search_knowledge_base",
      "description": "Search the knowledge base for relevant articles",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "query",
          "type": "str",
          "description": "The search query for the knowledge base."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `search_knowledge_base` imported from `tools.knowledge_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Searches the knowledge base for articles relevant to a given query."
    },
    {
      "id": "technical_support_agent_run_diagnostics",
      "name": "run_diagnostics",
      "description": "Run system diagnostics to identify technical issues",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "issue_description",
          "type": "str",
          "description": "Description of the technical issue to diagnose."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `run_diagnostics` imported from `tools.technical_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Executes system diagnostic routines to identify technical problems."
    },
    {
      "id": "technical_support_agent_check_system_status",
      "name": "check_system_status",
      "description": "Check current system status and health",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "component",
          "type": "str",
          "description": "Optional component to check status for, defaults to 'all'."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `check_system_status` imported from `tools.technical_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Retrieves the current operational status and health of the system or specified components."
    },
    {
      "id": "technical_support_agent_search_knowledge_base",
      "name": "search_knowledge_base",
      "description": "Search technical documentation and solutions",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "query",
          "type": "str",
          "description": "The search query for technical documentation."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `search_knowledge_base` imported from `tools.knowledge_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Searches the knowledge base specifically for technical documentation and troubleshooting solutions."
    },
    {
      "id": "billing_agent_query_billing_history",
      "name": "query_billing_history",
      "description": "Query customer's billing and payment history",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "customer_id",
          "type": "str",
          "description": "The customer identifier to query billing history for."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `query_billing_history` imported from `tools.billing_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Retrieves a customer's billing and payment transaction history."
    },
    {
      "id": "billing_agent_process_refund",
      "name": "process_refund",
      "description": "Process a refund for the customer",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "transaction_id",
          "type": "str",
          "description": "The ID of the transaction to refund."
        },
        {
          "name": "amount",
          "type": "float",
          "description": "The amount to be refunded."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `process_refund` imported from `tools.billing_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Initiates and processes a refund for a specified customer transaction."
    },
    {
      "id": "billing_agent_update_subscription",
      "name": "update_subscription",
      "description": "Update or modify customer subscription",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "customer_id",
          "type": "str",
          "description": "The customer identifier whose subscription needs updating."
        },
        {
          "name": "new_plan",
          "type": "str",
          "description": "Details of the new subscription plan."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `update_subscription` imported from `tools.billing_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Modifies or changes an existing customer subscription plan."
    },
    {
      "id": "billing_agent_query_customer_history",
      "name": "query_customer_history",
      "description": "Query customer's account information",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "customer_id",
          "type": "str",
          "description": "The customer identifier to query account information for."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `query_customer_history` imported from `tools.database_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Retrieves general account information for a given customer."
    },
    {
      "id": "escalation_agent_create_ticket",
      "name": "create_ticket",
      "description": "Create a support ticket for human agents",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "subject",
          "type": "str",
          "description": "Subject of the support ticket."
        },
        {
          "name": "description",
          "type": "str",
          "description": "Detailed description of the issue for the ticket."
        },
        {
          "name": "priority",
          "type": "str",
          "description": "Priority level of the ticket (e.g., 'low', 'medium', 'high')."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `create_ticket` imported from `tools.ticket_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Generates a new support ticket in the system for human agent intervention."
    },
    {
      "id": "escalation_agent_assign_to_human",
      "name": "assign_to_human",
      "description": "Assign case to a human support agent",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "ticket_id",
          "type": "str",
          "description": "The ID of the ticket to assign."
        },
        {
          "name": "agent_id",
          "type": "str",
          "description": "Optional ID of the human agent to assign the ticket to."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `assign_to_human` imported from `tools.ticket_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Routes an open case or ticket to a human support agent for resolution."
    },
    {
      "id": "escalation_agent_send_email",
      "name": "send_email",
      "description": "Send email notification to customer or team",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "recipient",
          "type": "str",
          "description": "The email address of the recipient."
        },
        {
          "name": "subject",
          "type": "str",
          "description": "The subject line of the email."
        },
        {
          "name": "body",
          "type": "str",
          "description": "The main content of the email."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `send_email` imported from `tools.notification_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Dispatches an email notification to a specified customer or internal team member."
    },
    {
      "id": "escalation_agent_send_slack_notification",
      "name": "send_slack_notification",
      "description": "Send notification to support team via Slack",
      "file_path": "agents/main_agents.py",
      "parameters": [
        {
          "name": "channel",
          "type": "str",
          "description": "The Slack channel to send the notification to."
        },
        {
          "name": "message",
          "type": "str",
          "description": "The content of the Slack message."
        }
      ],
      "return_type": "str",
      "code": "This tool wraps the function `send_slack_notification` imported from `tools.notification_tools`. Its full implementation is not available in `agents/main_agents.py`.",
      "summary": "Sends a notification or message to a designated Slack channel for the support team."
    }
  ],
  "relationships": [
    {
      "id": "triage_routes_to_technical_support",
      "from_agent_id": "triage_agent",
      "to_agent_id": "technical_support_agent",
      "type": "calls",
      "description": "The Triage Agent's primary role is to analyze customer queries and route technical issues to the Technical Support Agent, acting as the first point of contact and directing workflow.",
      "data_flow": "Customer's original query, customer_id, potentially initial findings (e.g., relevant customer history or knowledge base search results) gathered by triage_agent to provide context."
    },
    {
      "id": "triage_routes_to_billing_agent",
      "from_agent_id": "triage_agent",
      "to_agent_id": "billing_agent",
      "type": "calls",
      "description": "The Triage Agent analyzes customer queries and routes billing/payment issues to the Billing Agent, ensuring specialized handling of financial inquiries.",
      "data_flow": "Customer's original query, customer_id, potentially initial customer history summary if gathered by triage_agent."
    },
    {
      "id": "triage_routes_to_escalation_agent",
      "from_agent_id": "triage_agent",
      "to_agent_id": "escalation_agent",
      "type": "calls",
      "description": "The Triage Agent routes complex or escalated cases that require human intervention or advanced management to the Escalation Agent.",
      "data_flow": "Customer's original query, customer_id, comprehensive context gathered by triage (e.g., customer history, initial knowledge base findings) that justifies escalation."
    },
    {
      "id": "triage_and_specialists_sequential_execution",
      "from_agent_id": "triage_agent",
      "to_agent_id": "any_specialist_agent",
      "type": "sequential",
      "description": "The system follows a sequential execution pattern where the Triage Agent always processes the initial query first and then routes to a single specialist agent. The specialist agent then handles the issue.",
      "data_flow": "Customer query flows from initial input to triage_agent, then relevant context and the query are passed to the chosen specialist agent."
    },
    {
      "id": "triage_billing_shared_customer_history_tool",
      "from_agent_id": "triage_agent",
      "to_agent_id": "billing_agent",
      "type": "collaborates",
      "description": "Both the Triage Agent and the Billing Agent utilize the 'query_customer_history' tool. Triage uses it for initial context and routing decisions, while the Billing Agent uses it for a deeper understanding of the customer's interaction history during billing issue resolution.",
      "data_flow": "Customer_id as input, and customer's account status, subscription tier, and previous interactions as output."
    },
    {
      "id": "triage_tech_shared_knowledge_base_tool",
      "from_agent_id": "triage_agent",
      "to_agent_id": "technical_support_agent",
      "type": "collaborates",
      "description": "Both the Triage Agent and the Technical Support Agent utilize the 'search_knowledge_base' tool. Triage uses it for initial query understanding, while Technical Support uses it for detailed troubleshooting and solution finding.",
      "data_flow": "Search query as input, and relevant knowledge base articles/summaries as output."
    }
  ],
  "repository": {
    "owner": "ashworks1706",
    "repo_name": "langchain-project",
    "description": null
  }
}